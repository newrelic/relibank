apiVersion: skaffold/v4beta13
kind: Config
metadata:
  name: relibank
build:
  artifacts:
  - image: relibank/accounts-service
    context: accounts_service
    docker:
      dockerfile: Dockerfile
    sync:
      manual:
      - src: "**/*.py"
        dest: /app
  - image: relibank/transaction-service
    context: transaction_service
    docker:
      dockerfile: Dockerfile
    sync:
      manual:
      - src: "**/*.py"
        dest: /app
  - image: relibank/bill-pay-service
    context: bill_pay
    docker:
      dockerfile: Dockerfile
    sync:
      manual:
      - src: "**/*.py"
        dest: /app
  - image: relibank/notifications-service
    context: notifications_service
    docker:
      dockerfile: Dockerfile
    sync:
      manual:
      - src: "**/*.py"
        dest: /app
  - image: relibank/scheduler-service
    context: event_scheduler
    docker:
      dockerfile: Dockerfile
    sync:
      manual:
      - src: "**/*.py"
        dest: /app
  tagPolicy:
    sha256: {}
  local:
    useBuildkit: true

# Manifests configuration - use Kustomize to handle image name mapping and CloudNativePG resources
manifests:
  kustomize:
    paths:
    - "k8s"

deploy:
  statusCheckDeadlineSeconds: 600  # Increased for CloudNativePG cluster startup
  tolerateFailuresUntilDeadline: true
  logs:
    prefix: auto
  hooks:
    before:
    - host:
        command: ["kubectl", "apply", "-f", "https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/release-1.24/releases/cnpg-1.24.0.yaml"]
        dir: "."
    - host:
        command: ["kubectl", "wait", "--for=condition=Available", "deployment/cnpg-controller-manager", "-n", "cnpg-system", "--timeout=300s"]
        dir: "."
    - host:
        command: ["echo", "üêò CloudNativePG operator installed and ready"]
        dir: "."

# Port forwarding configuration
portForward:
- resourceType: service
  resourceName: accounts-service
  namespace: relibank
  port: 5002
  localPort: 5002
- resourceType: service
  resourceName: transaction-service
  namespace: relibank
  port: 5001
  localPort: 5001
- resourceType: service
  resourceName: bill-pay-service
  namespace: relibank
  port: 5000
  localPort: 5000

# Multiple profiles for different environments and use cases
profiles:
# ===========================================
# LOCAL DEVELOPMENT PROFILE
# ===========================================
- name: local
  build:
    local:
      push: false
      useDockerCLI: true
    tagPolicy:
      envTemplate:
        template: "{{.IMAGE_NAME}}:local-{{.SHA}}"
  patches:
  - op: replace
    path: /build/local/useBuildkit
    value: false
  activation:
  - env: SKAFFOLD_PROFILE=local

# ===========================================
# DEBUG PROFILE
# ===========================================
- name: debug
  patches:
  - op: add
    path: /build/artifacts/0/docker/buildArgs/DEBUG
    value: "true"
  - op: add
    path: /build/artifacts/1/docker/buildArgs/DEBUG
    value: "true"
  - op: add
    path: /build/artifacts/2/docker/buildArgs/DEBUG
    value: "true"
  - op: add
    path: /build/artifacts/3/docker/buildArgs/DEBUG
    value: "true"
  - op: add
    path: /build/artifacts/4/docker/buildArgs/DEBUG
    value: "true"
  activation:
  - command: debug

# ===========================================
# CHAOS MESH SETUP (INFRASTRUCTURE + EXPERIMENTS)
# ===========================================
- name: chaos-mesh
  build:
    artifacts: [] # No builds needed
  deploy:
    statusCheckDeadlineSeconds: 600
    helm:
      releases:
      - name: chaos-mesh
        remoteChart: chaos-mesh
        repo: https://charts.chaos-mesh.org
        namespace: chaos-system
        createNamespace: true
        version: "2.7.2"
        setValues:
          chaosDaemon.runtime: containerd
          chaosDaemon.socketPath: /run/containerd/containerd.sock
          dashboard.securityMode: false
          dashboard.create: true
          controllerManager.replicaCount: 1
          controllerManager.chaosdSecurityMode: false
        wait: true
      hooks:
        after:
        - host:
            command: ["kubectl", "wait", "--for=condition=Ready", "pods", "-l", "app.kubernetes.io/name=chaos-mesh", "-n", "chaos-system", "--timeout=300s"]
            dir: "."
        - host:
            command: ["kubectl", "wait", "--for=condition=Established", "crd", "podchaos.chaos-mesh.org", "--timeout=120s"]
            dir: "."
        - host:
            command: ["kubectl", "wait", "--for=condition=Established", "crd", "networkchaos.chaos-mesh.org", "--timeout=120s"]
            dir: "."
        - host:
            command: ["kubectl", "wait", "--for=condition=Established", "crd", "iochaos.chaos-mesh.org", "--timeout=120s"]
            dir: "."
        - host:
            command: ["kubectl", "wait", "--for=condition=Established", "crd", "stresschaos.chaos-mesh.org", "--timeout=120s"]
            dir: "."
        - host:
            command: ["kubectl", "wait", "--for=condition=Established", "crd", "workflows.chaos-mesh.org", "--timeout=120s"]
            dir: "."
        - host:
            command: ["echo", "üî¨ Chaos Mesh infrastructure ready!"]
            dir: "."
        # Deploy chaos experiments after infrastructure is ready
        - host:
            command: ["kubectl", "apply", "-f", "chaos_mesh/experiments/"]
            dir: "."
        - host:
            command: ["echo", "üß™ Chaos experiments deployed!"]
            dir: "."
        - host:
            command: ["echo", "üéØ Chaos Dashboard available at: http://localhost:2333"]
            dir: "."
  # Port forwarding for chaos dashboard
  portForward:
  - resourceType: service
    resourceName: chaos-dashboard
    namespace: chaos-system
    port: 2333
    localPort: 2333
  activation:
  - command: chaos-mesh
