apiVersion: apps/v1
kind: Deployment
metadata:
  name: accounts-db
  namespace: relibank
  labels:
    app: accounts-db
    tier: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: accounts-db
  template:
    metadata:
      labels:
        app: accounts-db
        tier: database
        chaos-mesh.org/inject: enabled
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 999  # postgres user
        runAsGroup: 999
        fsGroup: 999
        fsGroupChangePolicy: "OnRootMismatch"
      containers:
      - name: postgres
        image: postgres:15
        ports:
        - containerPort: 5432
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 999
        env:
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: relibank-config
              key: DB_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: relibank-secrets
              key: DB_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: relibank-config
              key: DB_NAME
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: init-sql
          mountPath: /docker-entrypoint-initdb.d
        - name: tmp
          mountPath: /tmp
        - name: run
          mountPath: /var/run/postgresql
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - pg_isready -U postgres -d accountsdb && PGPASSWORD=$POSTGRES_PASSWORD psql -U postgres -d accountsdb -c 'SELECT 1'
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - pg_isready -U postgres -d accountsdb && PGPASSWORD=$POSTGRES_PASSWORD psql -U postgres -d accountsdb -c 'SELECT 1'
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: accounts-db-pvc
      - name: init-sql
        configMap:
          name: accounts-init-sql
      - name: tmp
        emptyDir: {}
      - name: run
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: accounts-db
  namespace: relibank
  labels:
    app: accounts-db
spec:
  selector:
    app: accounts-db
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: accounts-db-pvc
  namespace: relibank
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: accounts-init-sql
  namespace: relibank
data:
  init.sql: |
    -- Add your PostgreSQL init script here
    -- This should match the content of accounts_service/postgres/init.sql
    CREATE TABLE IF NOT EXISTS user_account (
      id SERIAL PRIMARY KEY,
      username VARCHAR(255) UNIQUE NOT NULL,
      email VARCHAR(255) UNIQUE NOT NULL,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mssql
  namespace: relibank
  labels:
    app: mssql
    tier: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mssql
  template:
    metadata:
      labels:
        app: mssql
        tier: database
        chaos-mesh.org/inject: enabled
    spec:
      securityContext:
        fsGroup: 10001
      containers:
      - name: mssql
        image: mcr.microsoft.com/mssql/server:2022-latest
        ports:
        - containerPort: 1433
        env:
        - name: SA_PASSWORD
          valueFrom:
            secretKeyRef:
              name: relibank-secrets
              key: MSSQL_SA_PASSWORD
        - name: ACCEPT_EULA
          value: "Y"
        - name: MSSQL_PID
          value: "Developer"
        - name: MSSQL_AGENT_ENABLED
          value: "true"
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 10001
        volumeMounts:
        - name: mssql-data
          mountPath: /var/opt/mssql
        - name: mssql-log
          mountPath: /var/opt/mssql/log
        - name: init-scripts
          mountPath: /usr/config
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        lifecycle:
          postStart:
            exec:
              command:
              - /bin/bash
              - -c
              - |
                # Wait for SQL Server to be ready, then run initialization
                sleep 60
                until /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P "$SA_PASSWORD" -Q "SELECT 1" > /dev/null 2>&1; do
                  echo "Waiting for SQL Server to start..."
                  sleep 10
                done
                echo "SQL Server is ready, running initialization script..."
                /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P "$SA_PASSWORD" -i /usr/config/init.sql
                echo "Database initialization completed!"
        startupProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - "/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P \"$SA_PASSWORD\" -Q \"SELECT 1\" || exit 1"
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        livenessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - "/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P \"$SA_PASSWORD\" -Q \"SELECT 1\" || exit 1"
          initialDelaySeconds: 120
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - "/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P \"$SA_PASSWORD\" -Q \"SELECT 1\" || exit 1"
          initialDelaySeconds: 90
          periodSeconds: 10
          timeoutSeconds: 10
          failureThreshold: 3
      volumes:
      - name: mssql-data
        emptyDir:
          sizeLimit: 20Gi
      - name: mssql-log
        emptyDir:
          sizeLimit: 5Gi
      - name: init-scripts
        configMap:
          name: mssql-init-scripts
---
apiVersion: v1
kind: Service
metadata:
  name: mssql
  namespace: relibank
  labels:
    app: mssql
spec:
  selector:
    app: mssql
  ports:
  - port: 1433
    targetPort: 1433
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mssql-init-scripts
  namespace: relibank
data:
  init.sql: |
    -- Check if the database already exists
    IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = 'RelibankDB')
    BEGIN
        CREATE DATABASE RelibankDB;
    END;
    GO

    -- Wait until the database is truly available
    DECLARE @count INT = 0;
    WHILE @count < 10
    BEGIN
        IF EXISTS (SELECT * FROM sys.databases WHERE name = 'RelibankDB' AND state_desc = 'ONLINE')
        BEGIN
            BREAK;
        END
        WAITFOR DELAY '00:00:02';
        SET @count = @count + 1;
    END;
    GO

    -- Switch to the new database
    USE RelibankDB;
    GO

    -- Create the Transactions table
    IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='Transactions' and xtype='U')
    BEGIN
        CREATE TABLE Transactions (
            TransactionID INT IDENTITY(1,1) PRIMARY KEY,
            EventType VARCHAR(50) NOT NULL,
            BillID VARCHAR(50) NOT NULL,
            Amount DECIMAL(19, 4) NOT NULL,
            Currency VARCHAR(10) NOT NULL,
            AccountID INT NOT NULL,
            Timestamp FLOAT NOT NULL,
            CancellationUserID VARCHAR(50),
            CancellationTimestamp FLOAT
        );
    END;
    GO

    -- Create the new Ledger table for double-entry accounting
    IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='Ledger' and xtype='U')
    BEGIN
        CREATE TABLE Ledger (
            AccountID INT PRIMARY KEY,
            CurrentBalance DECIMAL(19, 4) NOT NULL
        );
    END;
    GO
